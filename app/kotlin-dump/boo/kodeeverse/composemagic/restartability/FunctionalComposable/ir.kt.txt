interface FunctionalComposable {
  @Composable
  abstract fun Content($composer: Composer?, $changed: Int) 
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun FunctionalComposableDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-143764742)
  sourceInformation($composer, "C(FunctionalComposableDemo)33@1337L945:FunctionalComposable.kt#5mdrpd")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-143764742, $changed, -1, "boo.kodeeverse.composemagic.restartability.FunctionalComposableDemo (FunctionalComposable.kt:32)")
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 653299358, "C38@1523L25,38@1509L66,39@1580L53,62@2269L9:FunctionalComposable.kt#5mdrpd")
      Text("ROOT @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111110)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      val local = <block>{
        class <no name provided> : FunctionalComposable {
          @Composable
          @ComposableTarget(applier = "androidx.compose.ui.UiComposable")
          override fun Content($composer: Composer?, $changed: Int) {
            $composer = $composer.startRestartGroup(-1005546584)
            sourceInformation($composer, "C(Content)42@1693L33,45@1779L25,44@1734L267,56@2131L11,52@2008L243:FunctionalComposable.kt#5mdrpd")
            val $dirty = $changed
            if ($changed and 0b0110 == 0) {
              $dirty = $dirty or if ($composer.changed(<this>)) 0b0100 else 0b0010
            }
            if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
              if (isTraceInProgress()) {
                traceEventStart(-1005546584, $dirty, -1, "boo.kodeeverse.composemagic.restartability.FunctionalComposableDemo.<anonymous>.<no name provided>.Content (FunctionalComposable.kt:42)")
              }
              var count by {
                val count$delegate = <block>{
                  sourceInformationMarkerStart($composer, 37375081, "CC(remember):FunctionalComposable.kt#9igjgp")
                  val tmp0_group = $composer.cache(false) {
                    mutableIntStateOf(0)
                  }
                  sourceInformationMarkerEnd($composer)
                  tmp0_group
                }
                get() {
                  return count$delegate.getValue(null, ::count$delegate)
                }
                set(<set-?>: Int) {
                  return count$delegate.setValue(null, ::count$delegate, <set-?>)
                }
              }
              Text("FunctionalComposable.Local @ ${<get-currentRecomposeScopeHash>($composer, 0)}
(${currentTimeMillis()})", Companion.fillMaxWidth().wrapContentWidth(), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000110000, 0, 0b00111111101110111100)
              Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
                onClick = sourceInformationMarkerStart($composer, 37389075, "CC(remember):FunctionalComposable.kt#9igjgp")
                val tmp1_group = $composer.cache(false) {
                  {
                    <get-count>()++
                  }
                }
                sourceInformationMarkerEnd($composer)
                tmp1_group
              ).background(
                color = Companion.Green
              ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
              if (isTraceInProgress()) {
                traceEventEnd()
              }
            } else {
              $composer.skipToGroupEnd()
            }
            val tmp2_rcvr = <this>
            $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
              tmp2_rcvr.Content($composer, updateChangedFlags($changed or 0b0001))
            }
          }
        }
        <no name provided>()
      }
      local.Content($composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    FunctionalComposableDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}